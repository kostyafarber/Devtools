// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/synth/messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Synth_SynthMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var command: Synth_SynthMessage.Command = .unspecified

  public var payload: Synth_SynthMessage.OneOf_Payload? = nil

  public var frequency: Float {
    get {
      if case .frequency(let v)? = payload {return v}
      return 0
    }
    set {payload = .frequency(newValue)}
  }

  public var volume: Float {
    get {
      if case .volume(let v)? = payload {return v}
      return 0
    }
    set {payload = .volume(newValue)}
  }

  public var dutyCycle: Float {
    get {
      if case .dutyCycle(let v)? = payload {return v}
      return 0
    }
    set {payload = .dutyCycle(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable, Sendable {
    case frequency(Float)
    case volume(Float)
    case dutyCycle(Float)

  }

  public enum Command: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case unspecified // = 0
    case setFrequency // = 1
    case setDutyCycle // = 2
    case start // = 3
    case stop // = 4
    case setVolume // = 5
    case increaseVolume // = 6
    case decreaseVolume // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .setFrequency
      case 2: self = .setDutyCycle
      case 3: self = .start
      case 4: self = .stop
      case 5: self = .setVolume
      case 6: self = .increaseVolume
      case 7: self = .decreaseVolume
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .setFrequency: return 1
      case .setDutyCycle: return 2
      case .start: return 3
      case .stop: return 4
      case .setVolume: return 5
      case .increaseVolume: return 6
      case .decreaseVolume: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Synth_SynthMessage.Command] = [
      .unspecified,
      .setFrequency,
      .setDutyCycle,
      .start,
      .stop,
      .setVolume,
      .increaseVolume,
      .decreaseVolume,
    ]

  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "synth"

extension Synth_SynthMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SynthMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .same(proto: "frequency"),
    3: .same(proto: "volume"),
    4: .standard(proto: "duty_cycle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.command) }()
      case 2: try {
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .frequency(v)
        }
      }()
      case 3: try {
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .volume(v)
        }
      }()
      case 4: try {
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .dutyCycle(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.command != .unspecified {
      try visitor.visitSingularEnumField(value: self.command, fieldNumber: 1)
    }
    switch self.payload {
    case .frequency?: try {
      guard case .frequency(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }()
    case .volume?: try {
      guard case .volume(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }()
    case .dutyCycle?: try {
      guard case .dutyCycle(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Synth_SynthMessage, rhs: Synth_SynthMessage) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Synth_SynthMessage.Command: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMMAND_UNSPECIFIED"),
    1: .same(proto: "SET_FREQUENCY"),
    2: .same(proto: "SET_DUTY_CYCLE"),
    3: .same(proto: "START"),
    4: .same(proto: "STOP"),
    5: .same(proto: "SET_VOLUME"),
    6: .same(proto: "INCREASE_VOLUME"),
    7: .same(proto: "DECREASE_VOLUME"),
  ]
}
