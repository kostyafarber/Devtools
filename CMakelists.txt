cmake_minimum_required(VERSION 3.26)
project(AudioSynthesiser)
include(FetchContent)

set(CMAKE_CXX_STANDARD 20)
set(EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address")

OPTION(ENABLE_TESTING "Enable testing" OFF)
OPTION(ENABLE_INTEGRATION_TESTING "Enable integration testing" OFF)
option(ENABLE_AUDIO_DEBUG "Enable audio debugging" OFF)
option(BUILD_AUDIO "Build audio component" ON)
option(BUILD_IPC "Build IPC component" ON)

set(PROJECT_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)
set(PROJECT_TEST_DIR ${CMAKE_SOURCE_DIR}/tests)

add_library(core_lib INTERFACE)
target_include_directories(core_lib INTERFACE ${PROJECT_SOURCE_DIR}/base)

if(ENABLE_TESTING)
  enable_testing()
  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG b514bdc898e2951020cbdca1304b75f5950d1f59 # release-1.10.0
  )

  target_link_libraries(core_lib INTERFACE
    GTest::gtest_main
    GTest::gmock_main
  )

  FetchContent_MakeAvailable(googletest)
endif()

if(ENABLE_AUDIO_DEBUG)
  add_compile_definitions(ENABLE_AUDIO_DEBUG)
endif()

if(BUILD_IPC)
  FetchContent_Declare(
    abseil
    GIT_REPOSITORY https://github.com/abseil/abseil-cpp.git
    GIT_TAG 20240116.1
  )
  FetchContent_MakeAvailable(abseil)

  find_package(Protobuf REQUIRED)

  protobuf_generate_cpp(
    PROTO_SRCS
    PROTO_HDRS
    protos/synth/messages.proto
  )

  add_library(ipc_proto ${PROTO_SRCS})
  target_include_directories(ipc_proto PUBLIC
    ${CMAKE_BINARY_DIR}
    ${Protobuf_INCLUDE_DIRS}
  )
  target_link_libraries(ipc_proto PUBLIC
    protobuf::libprotobuf
    absl::log
    absl::log_internal_message
    absl::log_internal_check_op
    absl::flags
    absl::flags_parse
    absl::strings
  )

  add_subdirectory(src/ipc)
  add_subdirectory(tests/ipc)
  target_link_libraries(core_lib INTERFACE ipc)
endif()

if(BUILD_AUDIO)
  add_subdirectory(src/core)
  add_subdirectory(tests/core)

  target_link_libraries(core_lib INTERFACE audio)
endif()

if(ENABLE_INTEGRATION_TESTING)
  add_subdirectory(tests/integration)
endif()

add_executable(app
  main.cpp
)
target_link_libraries(app PUBLIC core_lib)

# Add after the existing configuration
include(MacBundle.cmake)

# After building the app target
function(add_app_icon TARGET_NAME BUNDLE_NAME)
  set(ICONSET_DIR "${CMAKE_SOURCE_DIR}/AppIcon.iconset")
  set(ICNS_FILE "${CMAKE_BINARY_DIR}/AppIcon.icns")

  # List all required icon files
  set(ICON_FILES
    "${ICONSET_DIR}/icon_16x16.png"
    "${ICONSET_DIR}/icon_16x16@2x.png"
    "${ICONSET_DIR}/icon_32x32.png"
    "${ICONSET_DIR}/icon_32x32@2x.png"
    "${ICONSET_DIR}/icon_128x128.png"
    "${ICONSET_DIR}/icon_128x128@2x.png"
    "${ICONSET_DIR}/icon_256x256.png"
    "${ICONSET_DIR}/icon_256x256@2x.png"
    "${ICONSET_DIR}/icon_512x512.png"
    "${ICONSET_DIR}/icon_512x512@2x.png"
  )

  # Create a custom target for icon generation
  add_custom_target(generate_icns
    COMMAND iconutil -c icns "${ICONSET_DIR}" -o "${ICNS_FILE}"
    DEPENDS ${ICON_FILES}
    COMMENT "Converting AppIcon.iconset to AppIcon.icns"
    VERBATIM
  )

  # Make the main target depend on icon generation
  add_dependencies(${TARGET_NAME} generate_icns)

  # Copy icns to app bundle
  add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
    "${ICNS_FILE}"
    "${CMAKE_BINARY_DIR}/${BUNDLE_NAME}.app/Contents/Resources/AppIcon.icns"
    COMMENT "Copying AppIcon.icns to app bundle"
  )
endfunction()

if(APPLE)
  set(BUNDLE_NAME "SynthUI")

  # Build Swift UI
  add_custom_target(build_ui
    COMMAND rm -rf .build
    COMMAND swift build
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/ui
  )

  # Make app depend on UI build
  add_dependencies(app build_ui)

  # Configure Mac bundle
  configure_mac_bundle(app
    "${CMAKE_SOURCE_DIR}/ui/.build/debug/SynthUI"
    "${CMAKE_BINARY_DIR}/app"
  )

  add_app_icon(app "${BUNDLE_NAME}")
endif()